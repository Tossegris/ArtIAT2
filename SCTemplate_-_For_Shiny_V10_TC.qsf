{"SurveyEntry":{"SurveyID":"SV_bpHaPJs2wmAbxc1","SurveyName":"SCTemplate_-_For_Shiny_V10","SurveyDescription":null,"SurveyOwnerID":"UR_9otQh26Dpi3A2Ud","SurveyBrandID":"spupsych","DivisionID":null,"SurveyLanguage":"EN","SurveyActiveResponseSet":"RS_5j9wUMDd8C0v5bf","SurveyStatus":"Inactive","SurveyStartDate":"0000-00-00 00:00:00","SurveyExpirationDate":"0000-00-00 00:00:00","SurveyCreationDate":"2017-10-27 03:44:41","CreatorID":"UR_9otQh26Dpi3A2Ud","LastModified":"2017-10-27 04:06:51","LastAccessed":"0000-00-00 00:00:00","LastActivated":"0000-00-00 00:00:00","Deleted":null},"SurveyElements":[{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"BL","PrimaryAttribute":"Survey Blocks","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":[{"Type":"Default","Description":"IAT 1 - Compatible First [Target A on RIGHT with POS]","ID":"BL_6yE3F8l9hUikad7","BlockElements":[{"Type":"Question","QuestionID":"QID1"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID2"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID3"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID4"}]},{"Type":"Trash","Description":"Trash \/ Unused Questions","ID":"BL_4TPffpld6hjU9lb","BlockElements":null},{"Type":"Standard","SubType":"","Description":"IAT 2 - Compatible First [Target A on RIGHT with NEG]","ID":"BL_bdCVDLSCxhWO8OF","BlockElements":[{"Type":"Question","QuestionID":"QID5"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID6"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID7"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID8"}]},{"Type":"Standard","SubType":"","Description":"IAT 3 - Compatible First [Target A on LEFT with POS]","ID":"BL_0PS224iJB49NtVb","BlockElements":[{"Type":"Question","QuestionID":"QID9"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID10"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID11"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID12"}]},{"Type":"Standard","SubType":"","Description":"IAT 2 - Compatible First [Target A on LEFT with NEG]","ID":"BL_9vuvYfD4zFpvUHj","BlockElements":[{"Type":"Question","QuestionID":"QID13"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID14"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID15"},{"Type":"Page Break"},{"Type":"Question","QuestionID":"QID16"}]},{"Type":"Standard","SubType":"","Description":"POST-IAT CONTENT","ID":"BL_8cOFDOXiSnNkZPT","BlockElements":[{"Type":"Question","QuestionID":"QID19"}]},{"Type":"Standard","SubType":"","Description":"PRE-IAT CONTENT","ID":"BL_bK4mX1d5TFsL4l7","BlockElements":[{"Type":"Question","QuestionID":"QID18"}]},{"Type":"Standard","SubType":"","Description":"INCOMPATIBLE DEVICE","ID":"BL_cNsC1mCGKywJClf","BlockElements":[{"Type":"Question","QuestionID":"QID17"}]}]},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"FL","PrimaryAttribute":"Survey Flow","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"Type":"Root","FlowID":"FL_1","Flow":[{"Type":"Branch","FlowID":"FL_10","Description":"New Branch","BranchLogic":{"0":{"0":{"LogicType":"DeviceType","Operator":"Is","LeftOperand":"mobile","Type":"Expression","Description":"<span class=\"ConjDesc\">If<\/span><span class=\"schema_desc\">Device Type<\/span><span class=\"select_val_desc Operator_desc\">Is<\/span><span class=\"select_val_desc LeftOperand_desc\">Mobile<\/span>"},"Type":"If"},"Type":"BooleanExpression"},"Flow":[{"Type":"Standard","ID":"BL_cNsC1mCGKywJClf","FlowID":"FL_8"},{"Type":"EndSurvey","FlowID":"FL_11"}]},{"Type":"Standard","ID":"BL_bK4mX1d5TFsL4l7","FlowID":"FL_7"},{"Type":"BlockRandomizer","FlowID":"FL_9","SubSet":1,"Flow":[{"Type":"Block","ID":"BL_6yE3F8l9hUikad7","FlowID":"FL_2"},{"Type":"Standard","ID":"BL_bdCVDLSCxhWO8OF","FlowID":"FL_3"},{"Type":"Standard","ID":"BL_0PS224iJB49NtVb","FlowID":"FL_4"},{"Type":"Standard","ID":"BL_9vuvYfD4zFpvUHj","FlowID":"FL_5"}]},{"Type":"Standard","ID":"BL_8cOFDOXiSnNkZPT","FlowID":"FL_6"}],"Properties":{"Count":11}}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SO","PrimaryAttribute":"Survey Options","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"BackButton":"false","SaveAndContinue":"true","SurveyProtection":"PublicSurvey","BallotBoxStuffingPrevention":"false","NoIndex":"Yes","SecureResponseFiles":"true","SurveyExpiration":"None","SurveyTermination":"DefaultMessage","Header":"","Footer":"","ProgressBarDisplay":"None","PartialData":"+1 week","ValidationMessage":"","PreviousButton":" &larr; ","NextButton":" &rarr; ","SkinLibrary":"Qualtrics","SkinType":"MQ","Skin":"v4qualtrics2","NewScoring":1,"libraryId":"","nextButtonMid":"","previousButtonMid":"","headerMid":"","footerMid":"","QuestionsPerPage":"","PageTransition":"None","ExternalCSS":null,"CustomStyles":{"errorStyles":{"selector":".Skin .ValidationError","styles":{"color":null,"backgroundColor":null,"borderColor":null}},"errorStylesBG":{"selector":".Skin .HeaderValidationError, .Skin .HeaderValidationError li a","styles":{"color":null,"backgroundColor":null}},"pageStyles":{"selector":"#SurveyEngineBody","styles":{"backgroundColor":null}},"textStyles":{"selector":".SkinInner","styles":{"fontFamily":null,"fontSize":null,"fontWeight":null,"fontStyle":null,"textDecoration":null,"color":null}},"questionStyles":{"selector":".Skin .QuestionText","styles":{"fontFamily":null,"fontSize":null,"fontWeight":null,"fontStyle":null,"textDecoration":null,"color":null}},"choiceStyles":{"selector":".Skin .horizontalbar th.ylabel, .Skin .Matrix table td, .Skin .Matrix table th, .Skin .Matrix table thead th, .Skin .Matrix table thead td, .Skin .PGR .DragAndDrop .Items label, .Skin .QuestionBody ul.ChoiceStructure, .Skin .PGR .DragAndDrop .Group ul, .Skin .PGR .DragAndDrop .Group h2, .Skin .PGR .DragAndDrop .Items ul, .Skin .PGR .DragAndDrop .Items h2, .Skin .DD .QuestionBody table.ChoiceStructure, .Skin .PGR .DragAndDrop .NoColumns td.groupsContainerTd div ul, .Skin .PGR .DragAndDrop .NoColumns td.groupsContainerTd div h2, .Skin .SBS thead th, .Skin .SBS td, .Skin .SBS .Answers td, .Skin .SBS .Answers th, .SBS table.ChoiceStructure, .Skin .horizontalbar thead table.LabelDescriptions tr td, .Skin .horizontalbar thead tr td.NotApplicable, .QuestionBody th, .Skin .QuestionBody .MC .MAVR label, .Skin .QuestionBody .MC .SAVR label, .Skin .SBS thead th, .Skin .SBS td, .Skin .RO .DND ul li, .Skin .reg, .SkinInner .ChoiceStructure, .Skin thead, .Skin .GAP .ChoiceStructure thead th, .Skin .GAP .ChoiceStructure .c4, .Skin .GAP .ChoiceStructure th, .Skin .GAP .ChoiceStructure .WhyText, .SkinInner .ChoiceStructure .LightBG, .Skin .QuestionOuter.Highlight .Inner .reg, .Skin .QuestionOuter.Highlight .Inner .alt, .Skin .QuestionOuter.Highlight .Inner .ReadableAlt       ","styles":{"fontFamily":null,"fontSize":null,"fontWeight":null,"fontStyle":null,"textDecoration":null,"color":null}},"headerStyles":{"selector":".Skin div#Header","styles":{"color":null}},"footerStyles":{"selector":".Skin #Footer","styles":{"color":null}},"questionSeparatorStyles":{"selector":".Skin .Separator","styles":{"backgroundColor":null,"display":null}},"highlightStyles":{"selector":".Skin .QuestionOuter.Highlight .Inner, .Skin .QuestionOuter.Highlight .Inner .reg, .Skin .QuestionOuter.Highlight .Inner .alt, .Skin .QuestionOuter.Highlight .Inner .ReadableAlt","styles":{"backgroundColor":null}},"highlightStylesAlt":{"selector":".Skin .QuestionOuter.Highlight .Inner .ReadableAlt, .Skin .QuestionOuter.Highlight .Inner .LightBG","styles":{"backgroundColor":null}},"textEntryStyles":{"selector":".Skin select, .Skin .InputText","styles":{"color":null}},"borderStyles":{"selector":".Skin .CS .horizontalbar table.sliderGrid tr.xlabel th, .Skin .CS .horizontalbar .ylabel, .Skin .CS .horizontalbar table.sliderGrid tr td.value, .Skin .Slider .horizontalbar table.sliderGrid tr.xlabel th, .Skin .BorderColor, .Skin .DarkBorderColor, .Skin .Slider .horizontalbar table.sliderGrid tr td.value, .Skin thead, .Skin .GAP .ChoiceStructure thead th  ","styles":{"borderColor":null}},"altRowStyles":{"selector":".Skin .ReadableAlt, .Skin .LightBG","styles":{"backgroundColor":null}},"customCSS":null},"HighlightQuestions":"off"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SCO","PrimaryAttribute":"Scoring","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"ScoringCategories":[],"ScoringCategoryGroups":[],"ScoringSummaryCategory":null,"ScoringSummaryAfterQuestions":0,"ScoringSummaryAfterSurvey":0,"DefaultScoringCategory":null,"AutoScoringCategory":null}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"STAT","PrimaryAttribute":"Survey Statistics","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"MobileCompatible":true,"ID":"Survey Statistics"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"QC","PrimaryAttribute":"Survey Question Count","SecondaryAttribute":"19","TertiaryAttribute":null,"Payload":null},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"RS","PrimaryAttribute":"RS_5j9wUMDd8C0v5bf","SecondaryAttribute":"Default Response Set","TertiaryAttribute":null,"Payload":null},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID14","SecondaryAttribute":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Cont...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n\tor\n\t<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Continue the task as you were completing it just before. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nUse the <span style=\"font-weight: bold\">E<\/span> key for the category\/categories on the left and the <span style=\"font-weight: bold\">I<\/span> key for the category\/categories on the right. Again, try to go as fast as possible without making mistakes. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 2 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q14 LN2","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Cont...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID14","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 51, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID13","SecondaryAttribute":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Inst...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n\tor\n\t<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">E<\/span> and <span style=\"font-weight: strong\">I<\/span> keys. At the top of the screen are 3 categories. In the task, words and\/or images appear in the middle of the screen. <br><br>When the word\/image belongs to the category\/categories on the left, press the <span style=\"font-weight: bold\">E<\/span> key as fast as you can. When it belongs to the category\/categories on the right, press the <span style=\"font-weight: bold\">I<\/span> key as fast as you can. If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. Correct errors by hitting the other key. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 1 of 4<\/p>\n\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q13 LN1","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Inst...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID13","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 17, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID11","SecondaryAttribute":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Noti...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\t\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Notice that one of the categories from before has switched sides. Please practice this new configuration now. Remember to try to go as <em>fast as you can<\/em> while making as few errors as possible. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 3 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q11 LP3","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Noti...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID11","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 17, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID12","SecondaryAttribute":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Plea...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\t\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Please continue the task as you were just doing it. Again, try to go as fast as possible without making mistakes.  Correct errors by hitting the other key.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 4 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q12 LP4","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers Insects or Pleasant + Loading all the content... This should take less than 1 minute Plea...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID12","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 51, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID10","SecondaryAttribute":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Cont...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n\t\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Continue the task as you were completing it just before. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nUse the <span style=\"font-weight: bold\">E<\/span> key for the category\/categories on the left and the <span style=\"font-weight: bold\">I<\/span> key for the category\/categories on the right. Again, try to go as fast as possible without making mistakes. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 2 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q10 LP2","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Cont...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID10","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 42, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID9","SecondaryAttribute":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Inst...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n\t\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">E<\/span> and <span style=\"font-weight: strong\">I<\/span> keys. At the top of the screen are 3 categories. In the task, words and\/or images appear in the middle of the screen. <br><br>When the word\/image belongs to the category\/categories on the left, press the <span style=\"font-weight: bold\">E<\/span> key as fast as you can. When it belongs to the category\/categories on the right, press the <span style=\"font-weight: bold\">I<\/span> key as fast as you can. If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. Correct errors by hitting the other key. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 1 of 4<\/p>\n\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q9 LP1","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Inst...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID9","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 14, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID15","SecondaryAttribute":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Noti...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor\n\t<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Notice that one of the categories from before has switched sides. Please practice this new configuration now. Remember to try to go as <em>fast as you can<\/em> while making as few errors as possible. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 3 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q15 LN3","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Noti...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID15","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 14, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID16","SecondaryAttribute":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Plea...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor\n\t<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Insects<\/div>\n\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Please continue the task as you were just doing it. Again, try to go as fast as possible without making mistakes.  Correct errors by hitting the other key.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 4 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q16 LN4","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Flowers or Pleasant Insects + Loading all the content... This should take less than 1 minute Plea...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID16","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:69, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:69, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:69, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:69, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:69, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:69, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:69, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:73, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:73, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:73, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:73, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:73, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:73, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:73, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 42, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID2","SecondaryAttribute":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Cont...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Insects<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor\n\t<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Continue the task as you were completing it just before. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nUse the <span style=\"font-weight: bold\">E<\/span> key for the category\/categories on the left and the <span style=\"font-weight: bold\">I<\/span> key for the category\/categories on the right. Again, try to go as fast as possible without making mistakes. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 2 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q2 RP2","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Cont...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID2","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 42, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID1","SecondaryAttribute":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Inst...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Insects<\/div>\n\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor\n\t<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">E<\/span> and <span style=\"font-weight: strong\">I<\/span> keys. At the top of the screen are 3 categories. In the task, words and\/or images appear in the middle of the screen. <br><br>When the word\/image belongs to the category\/categories on the left, press the <span style=\"font-weight: bold\">E<\/span> key as fast as you can. When it belongs to the category\/categories on the right, press the <span style=\"font-weight: bold\">I<\/span> key as fast as you can. If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. Correct errors by hitting the other key. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 1 of 4<\/p>\n\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q1 RP1","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Inst...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID1","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 14, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID7","SecondaryAttribute":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Noti...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Insects<\/div>\n\t\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Notice that one of the categories from before has switched sides. Please practice this new configuration now. Remember to try to go as <em>fast as you can<\/em> while making as few errors as possible. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 3 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q7 RN3","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Noti...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID7","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 14, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID8","SecondaryAttribute":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Plea...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Insects<\/div>\n\t\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Please continue the task as you were just doing it. Again, try to go as fast as possible without making mistakes.  Correct errors by hitting the other key.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 4 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q8 RN4","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects Flowers or Pleasant + Loading all the content... This should take less than 1 minute Plea...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID8","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:73, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:73, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:73, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:73, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:73, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:73, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:73, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 42, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID6","SecondaryAttribute":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Cont...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Insects<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\t\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Continue the task as you were completing it just before. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nUse the <span style=\"font-weight: bold\">E<\/span> key for the category\/categories on the left and the <span style=\"font-weight: bold\">I<\/span> key for the category\/categories on the right. Again, try to go as fast as possible without making mistakes. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 2 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q6 RN2","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Cont...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID6","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 51, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID5","SecondaryAttribute":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Inst...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Insects<\/div>\n\tor<div style=\"color: green;\">Pleasant<\/div>\n\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Flowers<\/div>\n\t\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">E<\/span> and <span style=\"font-weight: strong\">I<\/span> keys. At the top of the screen are 3 categories. In the task, words and\/or images appear in the middle of the screen. <br><br>When the word\/image belongs to the category\/categories on the left, press the <span style=\"font-weight: bold\">E<\/span> key as fast as you can. When it belongs to the category\/categories on the right, press the <span style=\"font-weight: bold\">I<\/span> key as fast as you can. If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. Correct errors by hitting the other key. The label\/item colors may help you identify the appropriate category.\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 1 of 4<\/p>\n\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q5 RN1","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Inst...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID5","PrivateData":false,"QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 17, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID3","SecondaryAttribute":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Noti...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n\t<div style=\"color: black;\">Insects<\/div>\n\tor\n\t<div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n\t<div style=\"color: black;\">Flowers<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Notice that one of the categories from before has switched sides. Please practice this new configuration now. Remember to try to go as <em>fast as you can<\/em> while making as few errors as possible. Correct errors by hitting the other key. \n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 3 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q3 RP3","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Noti...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID3","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 7, 17, 24];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID4","SecondaryAttribute":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Plea...","TertiaryAttribute":null,"Payload":{"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    line-height: 110%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    line-height: 110%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    line-height: 110%;\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n <div style=\"color: black;\">Insects<\/div>\n or\n <div style=\"color: green;\">Pleasant<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n <div style=\"color: black;\">Flowers<\/div>\n\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Please continue the task as you were just doing it. Again, try to go as fast as possible without making mistakes.  Correct errors by hitting the other key.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 4 of 4<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>","DefaultChoices":false,"DataExportTag":"Q4 RP4","QuestionType":"TE","Selector":"SL","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"Insects or Pleasant Flowers + Loading all the content... This should take less than 1 minute Plea...","Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID4","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\t\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n\tvar stimuli;\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUTID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n\tvar InputId = document.getElementById(\"QR~\"+this.questionId);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n\tif (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n        if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\"; \/\/OLD API ...MAY NOT WORK NOW\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\t\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\t\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n\t\t\t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\t\treturn document.addEventListener('keyup', keyCheckForcedError, false);\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n\t\tmessage = document.getElementById(\"message\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"Press E or I to advance to the next word\/image. Correct mistakes by pressing the other key.\";\n\t\t\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\t\t\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\t\t\tinput.value += \"END\";\n\t\t\tdocument.removeEventListener('keyup', keyCheckForcedError, false); \n\t \t\tif (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, 250);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n\t\t\t\tstart();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === 69 || keyCode === 73)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n\t\t\t}\n\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, 250);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\t\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO PORTION OF AN OBJECT\n\t\/* This function takes items from a given stimuli pool and places it randomly into portions of a destination object (positions\n\tbetween start and end). This is used, for example, to take portions of posstim and put it into a portion of the final \n\tstimuli object, or to move contents into intermediate objects that can then be placed (in alternating order) into a\n\tfinal stimuli object. *\/\n\t\n\tfunction stimBuilder(array, destination, start, end){\n\t\tvar i = start;\n\t\twhile(i<end){\n\t\t\tshuffle(array);\n\t\t\tfor(var j=0; j<array.length; j++){\n\t\t\t\tdestination[i].stimulus= array[j].stimulus;\n\t\t\t\tdestination[i].index= array[j].index;\n\t\t\t\tdestination[i].correct= array[j].correct;\n\t\t\t\ti++;\n\t\t\t\tif (i === end){return;}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n\timage_srcs = [];\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\n\tposstim = [\n\t\t{stimulus: \"<b style='color:green'>Gentle<\/b>\", correct:69, index: 1},\n\t\t{stimulus: \"<b style='color:green'>Enjoy<\/b>\", correct:69, index: 2},\n\t\t{stimulus: \"<b style='color:green'>Heaven<\/b>\", correct:69, index: 3},\n\t\t{stimulus: \"<b style='color:green'>Cheer<\/b>\", correct:69, index: 4},\n\t\t{stimulus: \"<b style='color:green'>Happy<\/b>\", correct:69, index: 5},\n\t\t{stimulus: \"<b style='color:green'>Love<\/b>\", correct:69, index: 6},\n\t\t{stimulus: \"<b style='color:green'>Friend<\/b>\", correct:69, index: 7}\n\t];\n\n\tAstim = [\n\t\t{stimulus: \"<b style='color:black'>Orchid<\/b>\", correct:73, index: 8},\n\t\t{stimulus: \"<b style='color:black'>Tulip<\/b>\", correct:73, index: 9},\n\t\t{stimulus: \"<b style='color:black'>Rose<\/b>\", correct:73, index: 10},\n\t\t{stimulus: \"<b style='color:black'>Daffodil<\/b>\", correct:73, index: 11},\n\t\t{stimulus: \"<b style='color:black'>Daisy<\/b>\", correct:73, index: 12},\n\t\t{stimulus: \"<b style='color:black'>Lilac<\/b>\", correct:73, index: 13},\n\t\t{stimulus: \"<b style='color:black'>Lily<\/b>\", correct:73, index: 14}\n\t];\n\n\tBstim = [\n\t\t{stimulus: \"<b style='color:black'>Wasp<\/b>\", correct:69, index: 15},\n\t\t{stimulus: \"<b style='color:black'>Flea<\/b>\", correct:69, index: 16},\n\t\t{stimulus: \"<b style='color:black'>Roach<\/b>\", correct:69, index: 17},\n\t\t{stimulus: \"<b style='color:black'>Centipede<\/b>\", correct:69, index: 18},\n\t\t{stimulus: \"<b style='color:black'>Moth<\/b>\", correct:69, index: 19},\n\t\t{stimulus: \"<b style='color:black'>Bedbug<\/b>\", correct:69, index: 20},\n\t\t{stimulus: \"<b style='color:black'>Gnat<\/b>\", correct:69, index: 21}\n\t];\n\n\n\n\t\/\/EMPTY SET OF TRIALS - LOADS FROM POOLS ABOVE\n\tstimuli = [\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"},\n\t\t{stimulus: \"\", correct: \"\", index: \"\"}\n\t];\n\n\n\t\/\/BUILD TRIALS\n\n\tvar cutoffs = [0, 21, 51, 72];\n\n\tstimBuilder(posstim, stimuli, cutoffs[0], cutoffs[1]);\n\tstimBuilder(Astim, stimuli, cutoffs[1], cutoffs[2]);\n\tstimBuilder(Bstim, stimuli, cutoffs[2], cutoffs[3]);\n\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\tshuffle(stimuli);\n\n\n\n\n});","PrivateData":false}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID17","SecondaryAttribute":"The survey software has detected that you are attempting to take this survey from an incompatible...","TertiaryAttribute":null,"Payload":{"QuestionText":"The survey software has detected that you are attempting to take this survey from an incompatible device. The survey contains questions that will only function correctly on a computer with a keyboard. Please open this survey from a computer with a keyboard.&nbsp;","DefaultChoices":false,"DataExportTag":"Q18","QuestionType":"DB","Selector":"TB","PrivateData":false,"Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"The survey software has detected that you are attempting to take this survey from an incompatible...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID17"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID19","SecondaryAttribute":"This serves as a placeholder for post-IAT content. Be sure to see our notes above.","TertiaryAttribute":null,"Payload":{"QuestionText":"This serves as a placeholder for post-IAT content. Be sure to see our notes above.","DefaultChoices":false,"DataExportTag":"Q22","QuestionType":"DB","Selector":"TB","PrivateData":false,"Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"This serves as a placeholder for post-IAT content. Be sure to see our notes above.","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID19"}},{"SurveyID":"SV_bpHaPJs2wmAbxc1","Element":"SQ","PrimaryAttribute":"QID18","SecondaryAttribute":"You can now customize your IAT study! This block serves as a placeholder for any content that com...","TertiaryAttribute":null,"Payload":{"QuestionText":"You can now customize your IAT study! This block serves as a placeholder for any content that comes before the IAT (consent, manipulations, measures, etc.).&nbsp;<div><br><div><div><div>Important notes:<\/div><div><br><\/div><div>- Information about iatgen can be found at www.iatgen.wordpress.com and on the Open Science Framework at&nbsp;https:\/\/osf.io\/9w38r\/<\/div><div><br><\/div><div>- The IAT consists of the four Qualtrics blocks currently in the randomizer right now. Each qualtrics block represent one permutations of a standard IAT:&nbsp;<\/div><div><br><\/div><div>(1) Compatible first - Target A on right initially paired with positive (RP)<\/div><div>(2) Incompatible first - Target A on right initially paired with negative (RN)<\/div><div><div>(3)&nbsp;Compatible&nbsp;first - Target A on left initially paired with positive (LP)<\/div><div>(4)&nbsp;Incompatible&nbsp;first - Target A on left initially paired with negative (LN)<\/div><\/div><div><br><\/div><div>By keeping these in the randomizer, the order of blocks and sides is fully counterbalanced between subjects.&nbsp;<\/div><div><br><\/div><div>- To move the entire IAT, move the entire randomizer to a new position. &nbsp;<\/div><div><br><\/div><div>- Be careful when creating new survey content! Qualtrics may accidentally place it IN the randomizer with your IAT. Be sure to check survey flow carefully prior to launch.&nbsp;<\/div><div><br><\/div><div>- DO NOT EDIT the IAT content within Qualtrics. This may disrupt the HTML and JavaScript code and cause it not to function.<div><div><br><\/div><div>- Be sure to check your survey flow prior to launch.&nbsp;<\/div><div><br><\/div><div>- Be sure to pilot test your IAT prior to launch. Run all four permutations and check the data. For each participant, you should be able to get data in seven IAT blocks (one of the four permutations).&nbsp;<\/div><\/div><div><br><\/div><div>If you have any questions, check us out at www.iatgen.wordpress.com<\/div><\/div><\/div><div><br><\/div><div>Thanks!&nbsp;<\/div><div><br><\/div><div>~The iatgen team<\/div><\/div><\/div>","DefaultChoices":false,"DataExportTag":"Q20","QuestionType":"DB","Selector":"TB","PrivateData":false,"Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"You can now customize your IAT study! This block serves as a placeholder for any content that com...","ChoiceOrder":[],"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"QuestionID":"QID18"}}]}